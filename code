import tkinter as tk
from tkinter import messagebox
import string
import random
import timeit

# Ограничение на характеристики пароля
def generate_password_with_constraint(num_passwords):
    passwords = []
    for _ in range(num_passwords):
        password = ''
        password += random.choice(string.ascii_letters)            # Первый символ - латинская буква
        password += random.choice(string.ascii_letters)            # Второй символ - латинская буква
        password += random.choice(string.ascii_letters)            # Ограничиваем третий символ так, чтобы он был только латинскими буквами
        password += ''.join(random.choices(string.digits, k=3))    # Ограничиваем остальные символы так, чтобы они были только цифрами
        passwords.append(password)
    return passwords

# Функция для измерения времени выполнения функции
def measure_time(func, num_passwords):
    start_time = timeit.default_timer()            # Запуск таймера
    result = func(num_passwords)                   # Выполнение функции
    end_time = timeit.default_timer()              # Завершение таймера
    time_elapsed = end_time - start_time           # Вычисление времени выполнения
    return result, time_elapsed                    # Возвращение результата и времени выполнения

# Функция для обработки нажатия кнопки
def generate_passwords():
    try:
        num_passwords = int(entry_passwords.get())   # Получение количества паролей
        generated_passwords, time_with_constraint = measure_time(generate_password_with_constraint, num_passwords)  # Измерение времени выполнения
        # Вывод времени выполнения
        time_output.delete(1.0, tk.END)  # Очистка текстового поля перед выводом
        time_output.insert(tk.END, f"Время выполнения: {time_with_constraint:.4f} сек\n")
        # Вывод сгенерированных паролей в текстовое поле
        text_output.delete(1.0, tk.END)  # Очистка текстового поля перед выводом
        text_output.insert(tk.END, "Сгенерированные пароли:\n")
        for password in generated_passwords:
            text_output.insert(tk.END, password + "\n")
    except ValueError:
        messagebox.showerror("Ошибка", "Введите целое число в поле ввода")

# Создание главного окна
root = tk.Tk()
root.title("Генерация паролей с ограничением")

# Определение размеров окна и его позиции по центру экрана
window_width = 500
window_height = 400
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
x_position = (screen_width - window_width) // 2
y_position = (screen_height - window_height) // 2
root.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

# Создание метки и поля ввода для количества паролей
label_passwords = tk.Label(root, text="Количество паролей:")
label_passwords.grid(row=0, column=0, padx=10, pady=10)
entry_passwords = tk.Entry(root)
entry_passwords.grid(row=0, column=1, padx=10, pady=10)

# Создание кнопки для генерации паролей
button_generate = tk.Button(root, text="Сгенерировать пароли", command=generate_passwords)
button_generate.grid(row=1, columnspan=2, padx=10, pady=10)

# Создание текстового поля для вывода времени выполнения
time_output = tk.Text(root, width=50, height=2)
time_output.grid(row=2, columnspan=2, padx=10, pady=10)

# Создание текстового поля для вывода сгенерированных паролей
text_output = tk.Text(root, width=50, height=10)
text_output.grid(row=3, columnspan=2, padx=10, pady=10)

# Добавление возможности прокрутки текстового поля с паролями
scrollbar = tk.Scrollbar(root, command=text_output.yview)
scrollbar.grid(row=3, column=2, sticky="nsew")
text_output.config(yscrollcommand=scrollbar.set)

# Запуск главного цикла программы
root.mainloop()
